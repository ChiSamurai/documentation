<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<book>
    <bookinfo>
    <productname>eXist-db â€“ Open Source Native XML Database</productname>
        <title>XQuery Update Extension</title>
        <date>December 2012</date>
    </bookinfo>
    <chapter>
        <title>XQuery Update Extension</title>
        <para>eXist-db provides an extension to XQuery for updating nodes in the database. The
            extension adds the following operations: insert, delete, replace, update value, and
            rename. This extension was created well before the W3C working group created the <ulink
                url="http://www.w3.org/TR/xquery-update-10/">XQuery Update Facility 1.0</ulink>
            recommendation, and it still remains the primary method (besides <ulink
                url="http://xmldb-org.sourceforge.net/xupdate/">XUpdate</ulink>) for
            updating nodes.</para>
        <important>
            <para>The XQuery update extension has been designed around updating
                <emphasis>persistent</emphasis> documents stored in the database. It is 
                not suitable for updating temporary document fragments constructed within an query, 
                i.e., you can't use it to modify the results returned by a query. For example, the following
                query has no visible effect because it operates on an XML node constructed in-memory:
            </para>
            <synopsis language="xquery"><![CDATA[let $doc := <root><a/></root>
return (update insert <b/> into $doc/a, $doc)]]></synopsis>
            <para>The query just ignores the update and returns the constructed root element.</para>
        </important>
        <para>All update statements start with the keyword "update", followed by
            an update action. Available actions are: "insert", "delete", "replace", 
            "value" and "rename". The return type of the expression is <option>empty()</option>.
        </para>
        <para>An update statement may occur at any position within the XQuery main 
            code or a function body. When using an update within the return
            clause of a FLWOR expression, it should be clear that one should not 
            delete or replace nodes that are still being used by enclosing code. A delete 
            or replace will be processed immediately, and
            the deleted or replaced node will no longer be available. For example, the
            following expression throws the db into an inconsistent state if //address
            returns more than one node:</para>
        <example>
            <title>Bad Update</title>
            <programlisting language="xquery"><![CDATA[
for $address in //address
return
    update delete //address]]></programlisting>
        </example>
        <para>However, an expression like the following is safe as it only modifies the 
            current iteration variable:</para>
        <example>
            <title>Complex Update</title>
            <programlisting language="xquery"><![CDATA[
for $address in //address
return
    (: Move last name ("lname") and first name ("fname") into a new name element :)
    update replace $address with
        <address>
            <name>
                <family>{$address/lname/text()}</family>
                <given>{$address/fname/text()}</given>
            </name>
            {$address/city, $address/email}
        </address>]]></programlisting>
        </example>
        <section>
            <title>Insert</title>
            <synopsis>update insert expr ( into | following | preceding )
                exprSingle</synopsis>
            <para>Inserts the content sequence specified in expr into the
                element node passed via exprSingle. exprSingle and expr should evaluate to a node
                set. If exprSingle contains more than one element node, the
                modification will be applied to each of the nodes. The
                position of the insertion is determined by the keywords "into",
                "following" or "preceding":</para>
            <variablelist>
                <varlistentry>
                    <term>into</term>
                    <listitem>
                        <para>The content is appended after the last child node
                            of the specified elements.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>following</term>
                    <listitem>
                        <para>The content is inserted immediately after the node specified
                            in exprSingle.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>preceding</term>
                    <listitem>
                        <para>The content is inserted before the node specified
                        in exprSingle.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <example>
                <title>Insert Example</title>
                <programlisting language="xquery"><![CDATA[
update insert <email type="office">andrew@gmail.com</email> into //address[fname="Andrew"]
]]></programlisting>
            </example>
        </section>
        <section>
            <title>Replace</title>
            <synopsis>update replace expr with exprSingle</synopsis>
            <para>Replaces the nodes returned by expr with the nodes in
                exprSingle. expr may evaluate to a single element, attribute or
                text node. If it is an element, exprSingle should contain a
                single element node as well. If it is an attribute or text node, the
                value of the attribute or the text node is set to the concatenated string values of all
                nodes in exprSingle.</para>
            <example>
                <title>Replace Example</title>
                <programlisting language="xquery"><![CDATA[update replace //fname[. = "Andrew"] with <fname>Andy</fname>]]></programlisting>
            </example>
        </section>
        <section>
            <title>Value</title>
            <synopsis>update value expr with exprSingle</synopsis>
            <para>Updates the content of all nodes in expr with the items in
                exprSingle. If expr is an attribute or text node, its value will
                be set to the concatenated string value of all items in
                exprSingle.</para>
        </section>
        <section>
            <title>Delete</title>
            <synopsis>update delete expr</synopsis>
            <para>Removes all nodes in expr from their document.</para>
            <example>
                <title>Delete Example</title>
                <programlisting language="xquery"><![CDATA[for $city in //address/city return update delete $city]]></programlisting>
            </example>
        </section>
        <section>
            <title>Rename</title>
            <synopsis>update rename expr as exprSingle</synopsis>
            <para>Renames the nodes in expr using the string value of the first
                item in exprSingle as the new name of the node. expr should
                evaluate to a set of elements or attributes.</para>
        </section>
    </chapter>
</book>
